#pragma once

#include "../types.hpp"
#include "../math.hpp"

#include <algorithm>
#include <optional>
#include <cmath>
#include <cassert>


namespace cmap {

struct srgb {
    f32 r, g, b;

    static constexpr auto from(f32 r, f32 g, f32 b) -> srgb;
};

constexpr auto srgb::from(f32 r, f32 g, f32 b) -> srgb
{
    return {r, g, b};
}

constexpr auto operator+(srgb a, srgb b) -> srgb
{
    return {a.r + b.r, a.g + b.g, a.b + b.b};
}

constexpr auto operator*(f32 s, srgb c) -> srgb
{
    return {s * c.r, s * c.g, s * c.b};
}

constexpr auto operator*(srgb c, f32 s) -> srgb
{
    return s * c;
}


struct srgba {
    f32 r, g, b, a;

    static constexpr auto from(f32 r, f32 g, f32 b) -> srgba;
};

constexpr auto srgba::from(f32 r, f32 g, f32 b) -> srgba
{
    return {r, g, b, 1.0};
}


template<typename T>
auto normalized(T const& value, std::pair<T, T> range) -> f32
{
    auto v = static_cast<f32>(value - range.first);
    auto n = static_cast<f32>(range.second - range.first);

    return std::clamp(v / n, 0.0f, 1.0f);
}


class cmap {
public:
    virtual ~cmap() = default;

    virtual auto map_value(f32 value) const -> srgb = 0;

    template<typename T, typename P>
    auto map(T const& value, std::pair<T, T> range) const -> P;

    template<typename T, typename P>
    auto map(image<T> const& img, std::optional<std::pair<T, T>> range = std::nullopt) const -> image<P>;

    template<typename T, typename P>
    void map_into(image<P>& dest, image<T> const& img, std::optional<std::pair<T, T>> range = std::nullopt) const;
};

template<typename T, typename P>
auto cmap::map(T const& value, std::pair<T, T> range) const -> P
{
    auto m = this->map_value(normalized(value, range));

    return P::from(m.r, m.g, m.b);
}

template<typename T, typename P>
auto cmap::map(image<T> const& img, std::optional<std::pair<T, T>> range) const -> image<P>
{
    auto out = image<P>{img.shape()};

    this->map_into(out, img, range);
    return out;
}

template<typename T, typename P>
void cmap::map_into(image<P>& dest, image<T> const& img, std::optional<std::pair<T, T>> range) const
{
    auto r = range.has_value() ? *range : minmax(img);

    assert(dest.shape() == img.shape());

    if (r.second - r.first <= 0) {
        r = {r.first, r.second + 1};
    }

    std::transform(img.begin(), img.end(), dest.begin(), [&](auto value) -> auto {
        return this->map<T, P>(value, r);
    });
}


class grayscale_t : public cmap {
public:
    auto map_value(f32 value) const -> srgb;
};

auto grayscale_t::map_value(f32 value) const -> srgb {
    return srgb::from(value, value, value);
};


template<std::size_t N>
class lut : public cmap {
private:
    std::array<srgb, N> m_table;

public:
    template<typename... Args>
    lut(Args&&... t);

    auto map_value(f32 value) const -> srgb;
};

template<std::size_t N>
template<typename... Args>
lut<N>::lut(Args&&... args)
    : m_table{std::forward<Args>(args)...}
{}

template<std::size_t N>
auto lut<N>::map_value(f32 value) const -> srgb {
    auto const n = static_cast<f32>(N - 1);
    auto const v = value * n;

    auto const a = std::floor(v);
    auto const b = std::ceil(v);

    auto const ca = m_table[static_cast<std::size_t>(a)];
    auto const cb = m_table[static_cast<std::size_t>(b)];

    return (v - a) * cb + (1.0f - (v - a)) * ca;
};


inline const grayscale_t grayscale {};

/*
 * Viridis colormap as used in matplotlib.
 *
 * See <https://github.com/BIDS/colormap> for details.
 * Colormap developed by Nathaniel J. Smith, Stefan van der Walt, and Eric Firing.
 * Licensed under CC0.
 */
inline const lut<256> viridis {
    srgb { 0.267004, 0.004874, 0.329415 },
    srgb { 0.268510, 0.009605, 0.335427 },
    srgb { 0.269944, 0.014625, 0.341379 },
    srgb { 0.271305, 0.019942, 0.347269 },
    srgb { 0.272594, 0.025563, 0.353093 },
    srgb { 0.273809, 0.031497, 0.358853 },
    srgb { 0.274952, 0.037752, 0.364543 },
    srgb { 0.276022, 0.044167, 0.370164 },
    srgb { 0.277018, 0.050344, 0.375715 },
    srgb { 0.277941, 0.056324, 0.381191 },
    srgb { 0.278791, 0.062145, 0.386592 },
    srgb { 0.279566, 0.067836, 0.391917 },
    srgb { 0.280267, 0.073417, 0.397163 },
    srgb { 0.280894, 0.078907, 0.402329 },
    srgb { 0.281446, 0.084320, 0.407414 },
    srgb { 0.281924, 0.089666, 0.412415 },
    srgb { 0.282327, 0.094955, 0.417331 },
    srgb { 0.282656, 0.100196, 0.422160 },
    srgb { 0.282910, 0.105393, 0.426902 },
    srgb { 0.283091, 0.110553, 0.431554 },
    srgb { 0.283197, 0.115680, 0.436115 },
    srgb { 0.283229, 0.120777, 0.440584 },
    srgb { 0.283187, 0.125848, 0.444960 },
    srgb { 0.283072, 0.130895, 0.449241 },
    srgb { 0.282884, 0.135920, 0.453427 },
    srgb { 0.282623, 0.140926, 0.457517 },
    srgb { 0.282290, 0.145912, 0.461510 },
    srgb { 0.281887, 0.150881, 0.465405 },
    srgb { 0.281412, 0.155834, 0.469201 },
    srgb { 0.280868, 0.160771, 0.472899 },
    srgb { 0.280255, 0.165693, 0.476498 },
    srgb { 0.279574, 0.170599, 0.479997 },
    srgb { 0.278826, 0.175490, 0.483397 },
    srgb { 0.278012, 0.180367, 0.486697 },
    srgb { 0.277134, 0.185228, 0.489898 },
    srgb { 0.276194, 0.190074, 0.493001 },
    srgb { 0.275191, 0.194905, 0.496005 },
    srgb { 0.274128, 0.199721, 0.498911 },
    srgb { 0.273006, 0.204520, 0.501721 },
    srgb { 0.271828, 0.209303, 0.504434 },
    srgb { 0.270595, 0.214069, 0.507052 },
    srgb { 0.269308, 0.218818, 0.509577 },
    srgb { 0.267968, 0.223549, 0.512008 },
    srgb { 0.266580, 0.228262, 0.514349 },
    srgb { 0.265145, 0.232956, 0.516599 },
    srgb { 0.263663, 0.237631, 0.518762 },
    srgb { 0.262138, 0.242286, 0.520837 },
    srgb { 0.260571, 0.246922, 0.522828 },
    srgb { 0.258965, 0.251537, 0.524736 },
    srgb { 0.257322, 0.256130, 0.526563 },
    srgb { 0.255645, 0.260703, 0.528312 },
    srgb { 0.253935, 0.265254, 0.529983 },
    srgb { 0.252194, 0.269783, 0.531579 },
    srgb { 0.250425, 0.274290, 0.533103 },
    srgb { 0.248629, 0.278775, 0.534556 },
    srgb { 0.246811, 0.283237, 0.535941 },
    srgb { 0.244972, 0.287675, 0.537260 },
    srgb { 0.243113, 0.292092, 0.538516 },
    srgb { 0.241237, 0.296485, 0.539709 },
    srgb { 0.239346, 0.300855, 0.540844 },
    srgb { 0.237441, 0.305202, 0.541921 },
    srgb { 0.235526, 0.309527, 0.542944 },
    srgb { 0.233603, 0.313828, 0.543914 },
    srgb { 0.231674, 0.318106, 0.544834 },
    srgb { 0.229739, 0.322361, 0.545706 },
    srgb { 0.227802, 0.326594, 0.546532 },
    srgb { 0.225863, 0.330805, 0.547314 },
    srgb { 0.223925, 0.334994, 0.548053 },
    srgb { 0.221989, 0.339161, 0.548752 },
    srgb { 0.220057, 0.343307, 0.549413 },
    srgb { 0.218130, 0.347432, 0.550038 },
    srgb { 0.216210, 0.351535, 0.550627 },
    srgb { 0.214298, 0.355619, 0.551184 },
    srgb { 0.212395, 0.359683, 0.551710 },
    srgb { 0.210503, 0.363727, 0.552206 },
    srgb { 0.208623, 0.367752, 0.552675 },
    srgb { 0.206756, 0.371758, 0.553117 },
    srgb { 0.204903, 0.375746, 0.553533 },
    srgb { 0.203063, 0.379716, 0.553925 },
    srgb { 0.201239, 0.383670, 0.554294 },
    srgb { 0.199430, 0.387607, 0.554642 },
    srgb { 0.197636, 0.391528, 0.554969 },
    srgb { 0.195860, 0.395433, 0.555276 },
    srgb { 0.194100, 0.399323, 0.555565 },
    srgb { 0.192357, 0.403199, 0.555836 },
    srgb { 0.190631, 0.407061, 0.556089 },
    srgb { 0.188923, 0.410910, 0.556326 },
    srgb { 0.187231, 0.414746, 0.556547 },
    srgb { 0.185556, 0.418570, 0.556753 },
    srgb { 0.183898, 0.422383, 0.556944 },
    srgb { 0.182256, 0.426184, 0.557120 },
    srgb { 0.180629, 0.429975, 0.557282 },
    srgb { 0.179019, 0.433756, 0.557430 },
    srgb { 0.177423, 0.437527, 0.557565 },
    srgb { 0.175841, 0.441290, 0.557685 },
    srgb { 0.174274, 0.445044, 0.557792 },
    srgb { 0.172719, 0.448791, 0.557885 },
    srgb { 0.171176, 0.452530, 0.557965 },
    srgb { 0.169646, 0.456262, 0.558030 },
    srgb { 0.168126, 0.459988, 0.558082 },
    srgb { 0.166617, 0.463708, 0.558119 },
    srgb { 0.165117, 0.467423, 0.558141 },
    srgb { 0.163625, 0.471133, 0.558148 },
    srgb { 0.162142, 0.474838, 0.558140 },
    srgb { 0.160665, 0.478540, 0.558115 },
    srgb { 0.159194, 0.482237, 0.558073 },
    srgb { 0.157729, 0.485932, 0.558013 },
    srgb { 0.156270, 0.489624, 0.557936 },
    srgb { 0.154815, 0.493313, 0.557840 },
    srgb { 0.153364, 0.497000, 0.557724 },
    srgb { 0.151918, 0.500685, 0.557587 },
    srgb { 0.150476, 0.504369, 0.557430 },
    srgb { 0.149039, 0.508051, 0.557250 },
    srgb { 0.147607, 0.511733, 0.557049 },
    srgb { 0.146180, 0.515413, 0.556823 },
    srgb { 0.144759, 0.519093, 0.556572 },
    srgb { 0.143343, 0.522773, 0.556295 },
    srgb { 0.141935, 0.526453, 0.555991 },
    srgb { 0.140536, 0.530132, 0.555659 },
    srgb { 0.139147, 0.533812, 0.555298 },
    srgb { 0.137770, 0.537492, 0.554906 },
    srgb { 0.136408, 0.541173, 0.554483 },
    srgb { 0.135066, 0.544853, 0.554029 },
    srgb { 0.133743, 0.548535, 0.553541 },
    srgb { 0.132444, 0.552216, 0.553018 },
    srgb { 0.131172, 0.555899, 0.552459 },
    srgb { 0.129933, 0.559582, 0.551864 },
    srgb { 0.128729, 0.563265, 0.551229 },
    srgb { 0.127568, 0.566949, 0.550556 },
    srgb { 0.126453, 0.570633, 0.549841 },
    srgb { 0.125394, 0.574318, 0.549086 },
    srgb { 0.124395, 0.578002, 0.548287 },
    srgb { 0.123463, 0.581687, 0.547445 },
    srgb { 0.122606, 0.585371, 0.546557 },
    srgb { 0.121831, 0.589055, 0.545623 },
    srgb { 0.121148, 0.592739, 0.544641 },
    srgb { 0.120565, 0.596422, 0.543611 },
    srgb { 0.120092, 0.600104, 0.542530 },
    srgb { 0.119738, 0.603785, 0.541400 },
    srgb { 0.119512, 0.607464, 0.540218 },
    srgb { 0.119423, 0.611141, 0.538982 },
    srgb { 0.119483, 0.614817, 0.537692 },
    srgb { 0.119699, 0.618490, 0.536347 },
    srgb { 0.120081, 0.622161, 0.534946 },
    srgb { 0.120638, 0.625828, 0.533488 },
    srgb { 0.121380, 0.629492, 0.531973 },
    srgb { 0.122312, 0.633153, 0.530398 },
    srgb { 0.123444, 0.636809, 0.528763 },
    srgb { 0.124780, 0.640461, 0.527068 },
    srgb { 0.126326, 0.644107, 0.525311 },
    srgb { 0.128087, 0.647749, 0.523491 },
    srgb { 0.130067, 0.651384, 0.521608 },
    srgb { 0.132268, 0.655014, 0.519661 },
    srgb { 0.134692, 0.658636, 0.517649 },
    srgb { 0.137339, 0.662252, 0.515571 },
    srgb { 0.140210, 0.665859, 0.513427 },
    srgb { 0.143303, 0.669459, 0.511215 },
    srgb { 0.146616, 0.673050, 0.508936 },
    srgb { 0.150148, 0.676631, 0.506589 },
    srgb { 0.153894, 0.680203, 0.504172 },
    srgb { 0.157851, 0.683765, 0.501686 },
    srgb { 0.162016, 0.687316, 0.499129 },
    srgb { 0.166383, 0.690856, 0.496502 },
    srgb { 0.170948, 0.694384, 0.493803 },
    srgb { 0.175707, 0.697900, 0.491033 },
    srgb { 0.180653, 0.701402, 0.488189 },
    srgb { 0.185783, 0.704891, 0.485273 },
    srgb { 0.191090, 0.708366, 0.482284 },
    srgb { 0.196571, 0.711827, 0.479221 },
    srgb { 0.202219, 0.715272, 0.476084 },
    srgb { 0.208030, 0.718701, 0.472873 },
    srgb { 0.214000, 0.722114, 0.469588 },
    srgb { 0.220124, 0.725509, 0.466226 },
    srgb { 0.226397, 0.728888, 0.462789 },
    srgb { 0.232815, 0.732247, 0.459277 },
    srgb { 0.239374, 0.735588, 0.455688 },
    srgb { 0.246070, 0.738910, 0.452024 },
    srgb { 0.252899, 0.742211, 0.448284 },
    srgb { 0.259857, 0.745492, 0.444467 },
    srgb { 0.266941, 0.748751, 0.440573 },
    srgb { 0.274149, 0.751988, 0.436601 },
    srgb { 0.281477, 0.755203, 0.432552 },
    srgb { 0.288921, 0.758394, 0.428426 },
    srgb { 0.296479, 0.761561, 0.424223 },
    srgb { 0.304148, 0.764704, 0.419943 },
    srgb { 0.311925, 0.767822, 0.415586 },
    srgb { 0.319809, 0.770914, 0.411152 },
    srgb { 0.327796, 0.773980, 0.406640 },
    srgb { 0.335885, 0.777018, 0.402049 },
    srgb { 0.344074, 0.780029, 0.397381 },
    srgb { 0.352360, 0.783011, 0.392636 },
    srgb { 0.360741, 0.785964, 0.387814 },
    srgb { 0.369214, 0.788888, 0.382914 },
    srgb { 0.377779, 0.791781, 0.377939 },
    srgb { 0.386433, 0.794644, 0.372886 },
    srgb { 0.395174, 0.797475, 0.367757 },
    srgb { 0.404001, 0.800275, 0.362552 },
    srgb { 0.412913, 0.803041, 0.357269 },
    srgb { 0.421908, 0.805774, 0.351910 },
    srgb { 0.430983, 0.808473, 0.346476 },
    srgb { 0.440137, 0.811138, 0.340967 },
    srgb { 0.449368, 0.813768, 0.335384 },
    srgb { 0.458674, 0.816363, 0.329727 },
    srgb { 0.468053, 0.818921, 0.323998 },
    srgb { 0.477504, 0.821444, 0.318195 },
    srgb { 0.487026, 0.823929, 0.312321 },
    srgb { 0.496615, 0.826376, 0.306377 },
    srgb { 0.506271, 0.828786, 0.300362 },
    srgb { 0.515992, 0.831158, 0.294279 },
    srgb { 0.525776, 0.833491, 0.288127 },
    srgb { 0.535621, 0.835785, 0.281908 },
    srgb { 0.545524, 0.838039, 0.275626 },
    srgb { 0.555484, 0.840254, 0.269281 },
    srgb { 0.565498, 0.842430, 0.262877 },
    srgb { 0.575563, 0.844566, 0.256415 },
    srgb { 0.585678, 0.846661, 0.249897 },
    srgb { 0.595839, 0.848717, 0.243329 },
    srgb { 0.606045, 0.850733, 0.236712 },
    srgb { 0.616293, 0.852709, 0.230052 },
    srgb { 0.626579, 0.854645, 0.223353 },
    srgb { 0.636902, 0.856542, 0.216620 },
    srgb { 0.647257, 0.858400, 0.209861 },
    srgb { 0.657642, 0.860219, 0.203082 },
    srgb { 0.668054, 0.861999, 0.196293 },
    srgb { 0.678489, 0.863742, 0.189503 },
    srgb { 0.688944, 0.865448, 0.182725 },
    srgb { 0.699415, 0.867117, 0.175971 },
    srgb { 0.709898, 0.868751, 0.169257 },
    srgb { 0.720391, 0.870350, 0.162603 },
    srgb { 0.730889, 0.871916, 0.156029 },
    srgb { 0.741388, 0.873449, 0.149561 },
    srgb { 0.751884, 0.874951, 0.143228 },
    srgb { 0.762373, 0.876424, 0.137064 },
    srgb { 0.772852, 0.877868, 0.131109 },
    srgb { 0.783315, 0.879285, 0.125405 },
    srgb { 0.793760, 0.880678, 0.120005 },
    srgb { 0.804182, 0.882046, 0.114965 },
    srgb { 0.814576, 0.883393, 0.110347 },
    srgb { 0.824940, 0.884720, 0.106217 },
    srgb { 0.835270, 0.886029, 0.102646 },
    srgb { 0.845561, 0.887322, 0.099702 },
    srgb { 0.855810, 0.888601, 0.097452 },
    srgb { 0.866013, 0.889868, 0.095953 },
    srgb { 0.876168, 0.891125, 0.095250 },
    srgb { 0.886271, 0.892374, 0.095374 },
    srgb { 0.896320, 0.893616, 0.096335 },
    srgb { 0.906311, 0.894855, 0.098125 },
    srgb { 0.916242, 0.896091, 0.100717 },
    srgb { 0.926106, 0.897330, 0.104071 },
    srgb { 0.935904, 0.898570, 0.108131 },
    srgb { 0.945636, 0.899815, 0.112838 },
    srgb { 0.955300, 0.901065, 0.118128 },
    srgb { 0.964894, 0.902323, 0.123941 },
    srgb { 0.974417, 0.903590, 0.130215 },
    srgb { 0.983868, 0.904867, 0.136897 },
    srgb { 0.993248, 0.906157, 0.143936 },
};

} /* namespace cmap */
